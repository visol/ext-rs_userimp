a:2:{s:4:"meta";a:3:{s:5:"title";s:12:"tx_rsuserimp";s:5:"descr";s:122:"Imports TYPO3 FE users and tt_address datasets from CSV files. Allows mapping of read in data against available DB fields.";s:7:"options";a:2:{s:10:"usageCount";s:1:"1";s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:2:{s:14:"MD5_cc9bedd43b";a:5:{s:8:"filename";s:27:"mod1/class.tx_rsuserimp.php";s:8:"filesize";i:37439;s:6:"header";a:5:{s:4:"text";s:651:"

This class provides CSV to TYPO3 DB user import features. It lets you map CSV to
corresponding user-specific DB fields and was inspired by the need to mass-import >> 1000 FE users.
Mapping features have successfully applied on Microsoft (c) Outlook Express WAB and Outlook address books,
CSV exports of Microsoft (c) Excel sheets and general text export files from 3COM (c) Palm Desktop and Lotus Notes (c).
The class is to be called after all necessary pre-mapping info has been provided.
This means we already have a CSV file in place and basic import setting configuration.

USAGE:
The class is intended to be used by creating an instance of it.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:25:"@author	Rainer Sudhoelter";i:1;s:19:"@package rs_userimp";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:17:"Rainer Sudhoelter";}s:8:"@package";a:1:{i:0;s:11:"rs_userimp ";}}}s:3:"DAT";a:20:{i:1;a:8:{s:6:"header";s:20:"class tx_rsuserimp {";s:5:"class";i:1;s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:74:"

Class tx_userimp: a generic user importer based on formated text files.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}}s:7:"content";a:2:{i:0;s:710:"
	var $previewNum;
	var $CSVhasTitle;
	var $fieldDelimiter;
	var $fieldEncaps;
	var $fieldmap;
	var $mandatoryFields = array();
	var $additionalMandatoryFields;
	var $enableAutoValues;
	var $enableAutoRename;
	var $enableUpdate;
	var $defaultUserData;
	var $file;
	var $CSV = array();
	var $num;
	var $importOK;
	var $importNow;
	var $map;
	var $columnNamesFromCSV;
	var $columnNamesFromDB;
	var $numMap;
	var $inData = array();
	var $noMap = array();
	var $userType;
	var $userTypeDB;
	var $userTypeDBTable;
	var $useRecycler;
	var $createDropFile;
	var $uniqueUserIdentifier;

	/*************************
	 *
	 * Section 1
	 *
	 * Explanation:
	 * Initialization of class.
	 *
	 *************************/

	";i:1;i:-1;}s:12:"content_size";i:710;s:13:"content_lines";i:39;s:6:"atLine";i:88;}i:3;a:8:{s:6:"header";s:25:"function tx_rsuserimp() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:11:"sectionText";a:3:{i:0;s:9:"Section 1";i:1;s:12:"Explanation:";i:2;s:24:"Initialization of class.";}s:4:"cDat";a:3:{s:4:"text";s:35:"

Constructor: set default values.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:40:"initialize the class with default values";}}s:7:"content";a:2:{i:0;s:429:"
		$this->userType = 'FE';
		$this->uniqueUserIdentifier = 'username';
		$this->enableAutoRename = FALSE;
		$this->enableAutoValues = FALSE;
		$this->enableUpdate = FALSE;
		$this->bg1 = '#FFEFBF';
		$this->bg2 = '#FFE79F';
		$this->useRecycler = 1;	// 0 = no, 1 = if available, 2 = always
		$this->previewNum = 3;
		$this->CSVhasTitle = TRUE;
		$this->importNow = $_POST['importNow'] ? 'TRUE' : 'FALSE';
	} //end  constructor

	";i:1;i:0;}s:12:"content_size";i:429;s:13:"content_lines";i:14;s:6:"atLine";i:133;}i:5;a:7:{s:6:"header";s:17:"function init() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:111:"

Get basic mapping data needed for dropdown menus.
Read in sample CSV data to display during mapping session.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:253:"
		$this->setUserTypeDefaultData();
		$this->CSV = $this->readSamplesFromCSV();
		$this->columnNumCSV = count($this->CSV[0]);
		$this->columnNamesFromCSV = $this->getColumnNamesFromCSV();
		$this->columnNamesFromDB = $this->getColumnNamesFromDB();
	}

	";i:1;i:0;}s:12:"content_size";i:253;s:13:"content_lines";i:8;s:6:"atLine";i:154;}i:7;a:7:{s:6:"header";s:35:"function setUserTypeDefaultData() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:162:"

Sets default data for the selected user type.
Default data depend on the user type to be imported: FE and tt_address vary and must be handled accordingly here.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
		global $TCA;

		$now = mktime();

		switch((string)$this->userType)	{

			case 'TT':
				/**
				* These fields are removed from the tt_address mapping process.
				*/
				$this->noMap = array(
					'pid',
					'hidden',
					'image'
					);

				$this->mandatoryFields = array(
					);

				$this->defaultUserData = array(
					'pid' => $this->defaultUserData['pid'],
			
[...]
tion 2
	 *
	 * Explanation:
	 * File functions: reading CSV files (partly and as a whole)
	 *
	 *************************/

	";i:1;i:1;}s:12:"content_size";i:2585;s:13:"content_lines";i:126;s:6:"atLine";i:169;}i:9;a:8:{s:6:"header";s:20:"function readCSV() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:11:"sectionText";a:3:{i:0;s:9:"Section 2";i:1;s:12:"Explanation:";i:2;s:57:"File functions: reading CSV files (partly and as a whole)";}s:4:"cDat";a:3:{s:4:"text";s:141:"

Read in the given CSV file. The function is used during the final file import.
Removes first the first data row if the CSV has fieldnames.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:21:"file content in array";}}s:7:"content";a:2:{i:0;s:431:"
		$file = $this->file;
		$mydata = array();
		$handle = fopen($file, "r");
		$i=0;
		$delimiter = ($this->fieldDelimiter === 'TAB') ? chr(9) : $this->fieldDelimiter;
		while (($data = fgetcsv($handle, 10000, $delimiter, $this->fieldEncaps)) !== FALSE) {
			$mydata[] = $data;
		}
		fclose ($handle);
		reset ($mydata);
		if ($this->CSVhasTitle) {
			$mydata = array_slice($mydata,1); //delete first row
		}
		return $mydata;
	}

	";i:1;i:0;}s:12:"content_size";i:431;s:13:"content_lines";i:17;s:6:"atLine";i:302;}i:11;a:7:{s:6:"header";s:31:"function readSamplesFromCSV() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:159:"

Read in sample data from CSV file. Needed for the mapping session to display some samples.
This function could actually be merged with function readCSV =:o)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"sample file content in array	...";}}s:7:"content";a:2:{i:0;s:480:"
		$file = $this->file;
		$mydata = array();
		$handle = fopen($file, "r");
		$i=0;
		$delimiter = ($this->fieldDelimiter == 'TAB') ? chr(9): $this->fieldDelimiter ;
		$fieldEncaps = empty($this->fieldEncaps) ? '\'' : $this->fieldEncaps;
		while (($data = fgetcsv($handle, 10000, $delimiter, $fieldEncaps)) !== FALSE) {
			$mydata[] = $data;
			if ($i == $this->previewNum) {
				break;
			} else {
				$i++;
			}
		}
		fclose ($handle);
		reset ($mydata);
		return $mydata;
	}

	";i:1;i:0;}s:12:"content_size";i:480;s:13:"content_lines";i:20;s:6:"atLine";i:326;}i:13;a:7:{s:6:"header";s:34:"function getColumnNamesFromCSV() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:286:"

Reads the fieldnames from the CSV file. If there are no fieldnames in the first row,
create fieldnames of the form Field_[x].
The fieldnames are needed during the mapping session to support the user some in his mapping task.
Also cuts off the first array item if is has field titles.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"$myheader: array with fieldnames";}}s:7:"content";a:2:{i:0;s:369:"
		global $LANG;
		$num = count($this->CSV[0]);

		if ($this->CSVhasTitle) {
			$myheader = $this->CSV[0];
			$this->CSV = array_slice($this->CSV, 1); //delete first row
		} else {
			for ($n = 0; $n < $this->columnNumCSV; $n++) {
				$myheader[$this->CSV[0][$n]] = $LANG->getLL('f1.tab3.mapper.fieldset2.field').sprintf("[%02s]",$n);
			}
		}
		return $myheader;
	}

	";i:1;i:0;}s:12:"content_size";i:369;s:13:"content_lines";i:15;s:6:"atLine";i:355;}i:15;a:7:{s:6:"header";s:33:"function getColumnNamesFromDB() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:239:"

Reads DB columns (fieldnames) from the DB using $TCA.
Also, disallowed mapping fields are removed by calling removeNoMapFields(&$fields).
The fieldnames are needed during the mapping session to support the user some in his mapping task.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:35:"$dbfields: array with DB fieldnames";}}s:7:"content";a:2:{i:0;s:387:"
		global $TCA;

		/**
		 * This was the initial way of getting available DB table fields for table fe_users:
		 * $dbFields = array_keys($TCA['fe_users']['columns']);
		 * Didn't work on 3.8.0rc1 systems, so it had to be changed to the following
		 */
		$dbFields = explode(',',$this->userTypeDB);
		$this->removeNoMapFields(&$dbFields); //passed by REFERENCE

		return $dbFields;
	}

	";i:1;i:0;}s:12:"content_size";i:387;s:13:"content_lines";i:14;s:6:"atLine";i:378;}i:17;a:7:{s:6:"header";s:39:"function removeNoMapFields($dbFields) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:272:"

Delete/unset disallowed mapping fields from passed fieldnames.
Not all available DB fields should be allowed for mapping. Some values are automatically computed,
others are set during first login and others are IMHO simply too dangerous to be set during an user import.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:29:"$dbFields passed by REFERENCE";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:348:"
		$i = 0;
		foreach ($dbFields as $key => $value) {
			if (in_array($value, $this->noMap)) {
				unset ($dbFields[$i]);
			}
			$i++;
		}
		$dbFields = array_values($dbFields);
	}

	/*************************
	 *
	 * Section 3
	 *
	 * Explanation:
	 * HTML helper functions: displays mapping forms and elements
	 *
	 *************************/


	";i:1;i:0;}s:12:"content_size";i:348;s:13:"content_lines";i:21;s:6:"atLine";i:401;}i:19;a:8:{s:6:"header";s:29:"function createImportForm() {";s:11:"parentClass";s:12:"tx_rsuserimp";s:11:"sectionText";a:3:{i:0;s:9:"Section 3";i:1;s:12:"Explanation:";i:2;s:58:"HTML helper functions: displays mapping forms and elements";}s:4:"cDat";a:3:{s:4:"text";s:50:"

Displays the import button for the import form.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}}s:7:"content";a:2:{i:0;s:369:"
		global $LANG;

		$content = $LANG->getLL('f1.tab4.section.import.label').'
				<div align="right">
					<input type="submit" name="importNow" value="'.$LANG->getLL('f1.tab4.section.import.import',1).'" '.($_POST['importNow'] ? 'disabled' : '').' onclick="return confirm(\''.$LANG->getLL('f1.tab4.section.import.sure',1).'\');">
				</div>';
		return $content;
	}


	";i:1;i:0;}s:12:"content_size";i:369;s:13:"content_lines";i:11;s:6:"atLine";i:428;}i:21;a:7:{s:6:"header";s:31:"function createMappingForm () {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:28:"

Display the mapping form.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}}s:7:"content";a:2:{i:0;s:507:"
		global $LANG;

		$content = '';
		$content .= '<fieldset>';
		$content .= '<legend align=left><b>'.$LANG->getLL('f1.tab3.mapper.fieldset1').'</b></legend>';

		if ($this->inData['fieldname']) {
			$map = array();
			$content .= $this->evaluateMappingForm();
		}

		if (!$this->inData['import']) {
			$content .= '<div align="right"><input type="submit" name="map" value="'
[...]
r.import').'" '.($_POST['importNow'] ? 'disabled' : '').'></div>';
			$content .= '</fieldset>';
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1883;s:13:"content_lines";i:43;s:6:"atLine";i:445;}i:23;a:7:{s:6:"header";s:33:"function evaluateMappingForm () {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:105:"

Check if all necessary mapping information is provided and if we may proceed with
the import workflow.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML content";}}s:7:"content";a:2:{i:0;s:507:"
		global $LANG;

		// merge mandatory and userdefined mandatory mapping fields
		if (!empty($this->additionalMandatoryFields)) {
			$this->mandatoryFields = array_unique(array_merge($this->mandatoryFields,$this->additionalMandatoryFields));
		}
		$this->importOK = FALSE;
		$mandatoryFieldError = array();

		$m = count($this->inData['fieldmap']);
		//delete empty values
		
[...]
l] = $row[$m];
							$this->numMap[$val] = $m;
						}
						$m++;
					}
					$i++;
				}
			}
		}
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:2047;s:13:"content_lines";i:72;s:6:"atLine";i:495;}i:25;a:7:{s:6:"header";s:29:"function createSelector($x) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:147:"

Creates the HTML mapping form which we need to map CSV fields to DB fields.
Provides data examples read from CSV to support the mapping process.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:47:"number of column for which to create a fieldmap";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"returns a HTML TD element";}}s:7:"content";a:2:{i:0;s:507:"
		global $LANG;

		$content = '';

		if (empty($this->columnNamesFromCSV[$x])) {
 			$header[$x] = $LANG->getLL('f1.tab3.mapper.field') . $x;
		} else {
			$header[$x] = $this->columnNamesFromCSV[$x];
		}

		$content .= '<td>';
		$content .= '<input type="hidden" name="tx_rsuserimp[fieldname]['.$x.']" value="'.$header[$x].'" title="'.$header[$x].'">';
		$content .= $this-
[...]
 'disabled' : '').' value="'.$this->inData[customValue][$x].'" /></div>';
		}
		$content .= '</td>';
		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:1253;s:13:"content_lines";i:35;s:6:"atLine";i:575;}i:27;a:7:{s:6:"header";s:28:"function fieldSelector($n) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:53:"

Creates a HTML select box for the mapping process.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:65:"number of column for which to create a HTML selct box element ...";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"HTML SELECT element";}}s:7:"content";a:2:{i:0;s:507:"
		global $LANG;

		$box = '<select style="display: block" name="tx_rsuserimp[fieldmap]['.$n.']" '.' size="1" '.($_POST['importNow'] ? 'disabled' : '').'>'."\n";
		$box .= '<option value="">'.$LANG->getLL('f1.tab3.mapper.mapsTo').'</option>'."\n";
		foreach ($this->columnNamesFromDB as $key => $value) {
			$box.='<option value="' . $value. '"';
			if ($this->inData['fieldm
[...]
*****************
	 *
	 * Section 4
	 *
	 * Explanation:
	 * The final DB import process.
	 *
	 *************************/

	";i:1;i:1;}s:12:"content_size";i:655;s:13:"content_lines";i:25;s:6:"atLine";i:617;}i:29;a:8:{s:6:"header";s:25:"function importUsers () {";s:11:"parentClass";s:12:"tx_rsuserimp";s:11:"sectionText";a:3:{i:0;s:9:"Section 4";i:1;s:12:"Explanation:";i:2;s:28:"The final DB import process.";}s:4:"cDat";a:3:{s:4:"text";s:76:"

Import users from CSV after all necessary mapping info has been provided.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"formated HTML to be printed";}}s:7:"content";a:2:{i:0;s:507:"
		global $BE_USER, $LANG, $FILEMOUNTS;

		// we need the UIDs of existing users later if we want to update users
		// unfortunately, sql_insert_id() doesn't work for SQL UPDATE statements
		// even though the MySQL reference handbook tells you so...
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery($this->uniqueUserIdentifier.',uid',$this->userTypeDBTable,'pid='.$this->defa
[...]
useRecycler = $this->useRecycler;

		$fileProcessor->start($FILE);
		$fileProcessor->processData();

		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:8823;s:13:"content_lines";i:231;s:6:"atLine";i:648;}i:31;a:7:{s:6:"header";s:50:"function generateCustomValue($main,$config,$row) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:414:"

This function parses the the custom mapping field for allowed susbtitution patterns.
The regex used here finds patterns of the form {f(p)} where "f" is a substitution function
and "p" is the parameter passed to "f". Supports fixed strings (s), CSV fields (f), bitmasks (b),
lowercased strings (l) and md5 values of CSV fields (m).
Apart from option b(), multiple substitutions within a single value are allowed.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:82:"$main: $main[$n][$this->inData['fieldmap'][$key]]: reference to current CSV values";}i:1;a:2:{i:0;s:6:"string";i:1;s:65:"$config: $this->inData['customValue'][$key]: option/config string";}i:2;a:2:{i:0;s:5:"array";i:1;s:35:"$row: $main[$n] the whole dataset n";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:33:"the manipulated/substituted value";}}s:7:"content";a:2:{i:0;s:507:"
		$copy = $row;
		$hit = '';

		// {<= this curly brace is needed by my editor to find corresponding braces
		// the regex expression below makes this necessary.
		// please ignore this comment =:o)
		// but since you are already here: hi, hope you like what you've found!
		preg_match_all("/\{([bflms])\((\d{1,}|[^()]*)\)[^}]*\}/", $config, $hit, PREG_SET_ORDER);
		$val = 
[...]
			}
					$val = intval($mask);
				break;
			}
		}
		$main = !empty($val) ? $val : '';
		return $main;
	} // end function

	";i:1;i:1;}s:12:"content_size";i:1221;s:13:"content_lines";i:53;s:6:"atLine";i:892;}i:33;a:7:{s:6:"header";s:48:"function checkUserDataFE (&$user,&$importUser) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:453:"

Checks FE user data for TYPO3 compliancy. Some FE data have limitations which we check in this function.
Some values can be fixed (fx. upper/lowercase conditions), others can not be fixed (fx. empty username/password).
Each value passed is manipulated by REFERENCE.
$user is the data array for the current user.
$importUser is the (boolean) import flag whether to import or not import the user.
The value returned is the HTML content to be displayed.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$user: current user to be checked";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:51:"$importUser: flag as to import or skip current user";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"HTML content to be displayed";}}s:7:"content";a:2:{i:0;s:507:"
		global $LANG;

		/* knock out conditions - default mandatory fields */

		$importUser = TRUE;

		if ( empty($user[$this->uniqueUserIdentifier]) ) { // check for empty username value
			$error[] = $LANG->getLL('f1.tab5.error.emptyUserName');//'empty username';
			$importUser = FALSE;
			$fatalError = TRUE;
		}

		if ( strlen($user['username']) > 50 ) { // check for max u
[...]
';
		}

		if (!empty($msg)) {
			$content = $LANG->getLL('f1.tab5.warning').implode(', ',$msg);
		}

		return $content;
	}

	";i:1;i:1;}s:12:"content_size";i:4024;s:13:"content_lines";i:104;s:6:"atLine";i:958;}i:35;a:7:{s:6:"header";s:47:"function checkUserDataTT (&$user,$importUser) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:115:"

Each value passed is manipulated by REFERENCE.
tt_address is less restrictive in what data is allowed or not =:o)";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$user: current user to be checked";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:51:"$importUser: flag as to import or skip current user";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"HTML content to be displayed";}}s:7:"content";a:2:{i:0;s:63:"		$importUser = TRUE;
		$content = '';
		return $content;
	}

	";i:1;i:0;}s:12:"content_size";i:63;s:13:"content_lines";i:5;s:6:"atLine";i:1071;}i:37;a:4:{s:6:"header";s:47:"function checkUserDataBE (&$user,$importUser) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:103:"

This function does nothing. It will be used in a later version
where BE user import will be enabled.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$user: current user to be checked";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:51:"$importUser: flag as to import or skip current user";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"HTML content to be displayed";}}s:6:"atLine";i:1085;}i:39;a:7:{s:6:"header";s:66:"function _fputcsv($fileName, $dataArray, $delimiter, $enclosure) {";s:11:"parentClass";s:12:"tx_rsuserimp";s:4:"cDat";a:3:{s:4:"text";s:169:"

In contrast to fgetcsv(), fputcsv() is not yet in the PHP 4 core (but in PHP5 CSV).
So we fake the function here. Should be interchangeable once official PHP5 is out.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$fileName: the file to write to";}i:1;a:2:{i:0;s:5:"array";i:1;s:30:"$dataArray: the array to write";}i:2;a:2:{i:0;s:6:"string";i:1;s:31:"$delimiter: the field delimiter";}i:3;a:2:{i:0;s:6:"string";i:1;s:35:"$enclosure: the enclosure character";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"
	// Build the string
	$line = "";
	$writeDelimiter = FALSE;
	foreach($dataArray as $dataRow){
		foreach ($dataRow as $dataElement) {
			if($writeDelimiter) $line .= $delimiter;
			$line .= $enclosure . $dataElement . $enclosure;
			$writeDelimiter = TRUE;
		} // end foreach($dataArray as $dataElement)
	// Append new line
	$line .= "\n";
	$writeDelimiter = FALSE;
	}
	if (t
[...]
_rsuserimp.php"])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]["XCLASS"]["ext/rs_userimp/mod1/class.tx_rsuserimp.php"]);
}
?>";i:1;i:1;}s:12:"content_size";i:701;s:13:"content_lines";i:24;s:6:"atLine";i:1103;}}s:10:"usageCount";a:20:{s:12:"H_186b676da3";a:4:{s:3:"ALL";a:2:{s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:244;s:15:"_functionHeader";s:20:"class tx_rsuserimp {";}s:12:"H_f5210ff44b";a:2:{s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:25:"function tx_rsuserimp() {";}s:12:"H_5b5f9e0a98";a:5:{s:3:"ALL";a:3:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:5;s:14:"nonObjectUsage";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:4:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:4;s:14:"nonObjectUsage";i:1;}s:24:"_searchtime_milliseconds";d:60;s:15:"_functionHeader";s:17:"function init() {";}s:12:"H_193ba1960f";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:35;s:15:"_functionHeader";s:35:"function setUserTypeDefaultData() {";}s:12:"H_ba37962d67";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:16;s:15:"_functionHeader";s:20:"function readCSV() {";}s:12:"H_462c0850f8";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:10;s:15:"_functionHeader";s:31:"function readSamplesFromCSV() {";}s:12:"H_00832b6fdd";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:12;s:15:"_functionHeader";s:34:"function getColumnNamesFromCSV() {";}s:12:"H_56b5026348";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:10;s:15:"_functionHeader";s:33:"function getColumnNamesFromDB() {";}s:12:"H_53aeda0944";a:5:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:44;s:15:"_functionHeader";s:39:"function removeNoMapFields($dbFields) {";}s:12:"H_1a1b575ce8";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:39;s:15:"_functionHeader";s:29:"function createImportForm() {";}s:12:"H_d061a40ae3";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:46;s:15:"_functionHeader";s:31:"function createMappingForm () {";}s:12:"H_411942ad6d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:16;s:15:"_functionHeader";s:33:"function evaluateMappingForm () {";}s:12:"H_e89e42f45f";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:19;s:15:"_functionHeader";s:29:"function createSelector($x) {";}s:12:"H_dbb0eddba1";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:19;s:15:"_functionHeader";s:28:"function fieldSelector($n) {";}s:12:"H_f54fc4a0a3";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:32;s:15:"_functionHeader";s:25:"function importUsers () {";}s:12:"H_91833f475c";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:26;s:15:"_functionHeader";s:50:"function generateCustomValue($main,$config,$row) {";}s:12:"H_ecb0d02227";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:27;s:15:"_functionHeader";s:48:"function checkUserDataFE (&$user,&$importUser) {";}s:12:"H_b03a144a28";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:23;s:15:"_functionHeader";s:47:"function checkUserDataTT (&$user,$importUser) {";}s:12:"H_79f1e42335";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:24;s:15:"_functionHeader";s:47:"function checkUserDataBE (&$user,$importUser) {";}s:12:"H_8e8d8b3121";a:2:{s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:66:"function _fputcsv($fileName, $dataArray, $delimiter, $enclosure) {";}}}s:14:"MD5_19aaeae789";a:5:{s:8:"filename";s:14:"mod1/index.php";s:8:"filesize";i:59157;s:6:"header";a:5:{s:4:"text";s:49:"

Module 'import' for the 'rs_userimp' extension.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:2:{i:0;s:52:"@author	Rainer Sudhoelter <r.sudhoelter (at) web.de>";i:1;s:104:"@comment Parts of this class (presets handling) are derived from SYSEXT:impexp written by Kasper Skarhoe";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:44:"Rainer Sudhoelter <r.sudhoelter (at) web.de>";}s:8:"@comment";a:1:{i:0;s:95:"Parts of this class (presets handling) are derived from SYSEXT:impexp written by Kasper Skarhoe";}}}s:3:"DAT";a:27:{i:1;a:8:{s:6:"header";s:49:"class tx_rsuserimp_module1 extends t3lib_SCbase {";s:5:"class";i:1;s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:70:"

Extends the "ScriptClasses" for backend modules to hold this module
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:165:"
		var $pageinfo;
		var $inData = array();
		var $presetContent;
		/*****************************
		 *
		 * Main functions
		 *
		 *****************************/

		";i:1;i:-1;}s:12:"content_size";i:165;s:13:"content_lines";i:10;s:6:"atLine";i:89;}i:3;a:8:{s:6:"header";s:17:"function init()	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:11:"sectionText";a:1:{i:0;s:14:"Main functions";}s:4:"cDat";a:3:{s:4:"text";s:25:"

Initializes the module
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:35:"standard initialization of BE modul";}}s:7:"content";a:2:{i:0;s:106:"
			global $BE_USER,$LANG,$BACK_PATH,$TCA_DESCR,$TCA,$CLIENT,$TYPO3_CONF_VARS;

			parent::init();
		}

		";i:1;i:0;}s:12:"content_size";i:106;s:13:"content_lines";i:6;s:6:"atLine";i:105;}i:5;a:7:{s:6:"header";s:23:"function menuConfig()	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:75:"

Adds items to the ->MOD_MENU array. Used for the function menu selector.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:424:"
			global $LANG;
			$this->MOD_MENU = Array (
				"function" => Array (
					"1" => $LANG->getLL("function1"),
					"2" => $LANG->getLL("function2"),
					"3" => $LANG->getLL("function3"),
//					"4" => "Export",
				)
			);
			parent::menuConfig();
		}

		// If you chose "web" as main module, you will need to consider the $this->id
		// parameter which will contain the uid-number of the page clicked in the page tree
		";i:1;i:0;}s:12:"content_size";i:424;s:13:"content_lines";i:15;s:6:"atLine";i:117;}i:7;a:7:{s:6:"header";s:17:"function main() {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:67:"

Main function of the module. Write the content to $this->content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
			global $BE_USER,$LANG,$BACK_PATH,$TCA_DESCR,$TCA,$CLIENT,$TYPO3_CONF_VARS;

			// Access check!
			// The page will show only if there is a valid page and if this page may be viewed by the user
			$this->pageinfo = t3lib_BEfunc::readPageAccess($this->id,$this->perms_clause);
			$access = is_array($this->pageinfo) ? 1 : 0;

			if (($this->id && $access) || ($BE_USER->us
[...]
************************
						 *
						 * General JavaScript functions
						 *
						 *****************************/
						";i:1;i:1;}s:12:"content_size";i:1832;s:13:"content_lines";i:49;s:6:"atLine";i:138;}i:9;a:8:{s:6:"header";s:25:"function jumpToUrl(URL)	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:11:"sectionText";a:1:{i:0;s:28:"General JavaScript functions";}s:4:"cDat";a:3:{s:4:"text";s:45:"

Javascript function:
redirect to given URL
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:29:"$URL: target URL to switch to";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:47:"							document.location = URL;
						}

						";i:1;i:0;}s:12:"content_size";i:47;s:13:"content_lines";i:3;s:6:"atLine";i:195;}i:11;a:7:{s:6:"header";s:35:"function swapPresetSelectFields() {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:69:"

Javascript function:
clears text field if select box is not empty.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"							var one = document.rs_userimp.swapfield.value;
							if(one != "") {
								document.rs_userimp.swapfield.value = 0;
							}
						}

						/**
						 * Javascript function:
						 * checks for empty mandatory settings, throws alert if needed.
						 *
						 * @return	void
						 */
						function checkForm () {'.
						  'if (document.rs_userimp.importStorageFo
[...]
oundColor = "#FFDFDF";
							 document.rs_userimp.uniqueIdentifier.focus();
							 return false;
						   }
						}

						";i:1;i:1;}s:12:"content_size";i:1773;s:13:"content_lines";i:41;s:6:"atLine";i:205;}i:13;a:7:{s:6:"header";s:19:"function toggle() {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:85:"

Javascript function:
unchecks enableAutovalue checkbox if enableUpdate is checked.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:459:"
							if (document.rs_userimp.enableUpdate.checked == true) {
								document.rs_userimp.enableAutoRename.checked = false;
								document.rs_userimp.enableAutoRename.disabled = true;
							}
							if (document.rs_userimp.enableUpdate.checked == false) {
								document.rs_userimp.enableAutoRename.disabled = false;
							}'.
							($_POST['importNow'] ? '
							document.rs_userimp.enableAutoRename.disabled = true;'
							: '').'
						}

						";i:1;i:0;}s:12:"content_size";i:459;s:13:"content_lines";i:13;s:6:"atLine";i:253;}i:15;a:7:{s:6:"header";s:32:"function toggleSelector (data) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:49:"

JavaScript function:
toggles given form fields
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:52:"$data: coma separated list of fields which to toggle";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:161:"							var fields = data.split(",");
							var num = fields.length;
							for(i = 0; i < num; i++) {
								toggleOptions(fields[i]);
							}
						}

						";i:1;i:0;}s:12:"content_size";i:161;s:13:"content_lines";i:7;s:6:"atLine";i:274;}i:17;a:7:{s:6:"header";s:28:"function toggleOptions(id) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:44:"

JavaScript function:
toggle input options
";s:5:"param";a:2:{i:0;a:2:{i:0;s:2:"id";i:1;s:42:"the id of the session item to hide or show";}i:1;a:2:{i:0;s:6:"single";i:1;s:72:"true to show only one item at a time, false the open as many as you want";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:192:"							if(document.getElementById("rsdivon_"+id).style.display == "none") {
								showHideFields(id, true);
							}
							else {
								showHideFields(id, false);
							}
						}

						";i:1;i:0;}s:12:"content_size";i:192;s:13:"content_lines";i:8;s:6:"atLine";i:290;}i:19;a:7:{s:6:"header";s:37:"function showHideFields(id, status) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:57:"

JavaScript function:
shows/hides selected form element
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:38:"$id: JavaScript id of the form element";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:42:"$status: status/visibility of form element";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:507:"							if(status) {
								document.getElementById("rsdivon_"+id).style.display = "block";
								document.getElementById("rsdivoff_"+id).style.display = "none";
							} else {
								document.getElementById("rsdivon_"+id).style.display = "none";
								document.getElementById("rsdivoff_"+id).style.display = "block";
							}
						}
					</script>
					<script src="s
[...]
->spacer(5);
			}
		}

		/*****************************
		 *
		 * Output functions
		 *
		 *****************************/

		";i:1;i:1;}s:12:"content_size";i:2259;s:13:"content_lines";i:55;s:6:"atLine";i:307;}i:21;a:8:{s:6:"header";s:25:"function printContent()	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:11:"sectionText";a:1:{i:0;s:16:"Output functions";}s:4:"cDat";a:3:{s:4:"text";s:29:"

Prints out the module HTML
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:19:"prints HTML content";}}s:7:"content";a:2:{i:0;s:76:"
			$this->content .= $this->doc->endPage();
			echo $this->content;
		}

		";i:1;i:0;}s:12:"content_size";i:76;s:13:"content_lines";i:5;s:6:"atLine";i:368;}i:23;a:7:{s:6:"header";s:26:"function moduleContent()	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:31:"

Generates the module content
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
			global $LANG, $TCA, $TCA_DESCR, $BE_USER;

			// get configuration values from ext_conf_template.txt
			$userimpConf = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['rs_userimp']);
			$useRecycler = $userimpConf['useRecycler'];
			$createDropFile = $userimpConf['createDropFile'];
			$garbageCollectionTriggerTimer = $userimpConf['garbageCollectionTriggerTime
[...]
s,'tx_rsuserimp_import',0,'',40);
				$this->content .= $content;
				break;
			} // end switch
		} // end module content

		";i:1;i:1;}s:12:"content_size";i:26873;s:13:"content_lines";i:622;s:6:"atLine";i:379;}i:25;a:7:{s:6:"header";s:29:"function getFEuserFolder () {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:216:"

Get IDs for allowed fe_users storage. These IDs are needed later on to create a dropdown selector.
Allowed in this respect means that the module fe_users is installed on that page.
The IDs are queried from the DB.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:188:"			$feFolders = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'uid,title',
					'pages',
					'module = "fe_users" AND deleted=0',
					'',
					'uid'
				);
			return $feFolders;
		}

		";i:1;i:0;}s:12:"content_size";i:188;s:13:"content_lines";i:10;s:6:"atLine";i:1009;}i:27;a:7:{s:6:"header";s:28:"function getTTsysFolder () {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:209:"

Get IDs of allowed storage folders. These IDs are needed later on to create a dropdown selector.
Allowed folders means that the doktype is "sysfolder" (254) and not deleted.
The IDs are queried from the DB.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:195:"			$feFolders = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'uid,title',
					'pages',
					'doktype = 254 AND deleted=0 AND hidden=0',
					'',
					'uid'
				);
			return $feFolders;
		}

		";i:1;i:0;}s:12:"content_size";i:195;s:13:"content_lines";i:10;s:6:"atLine";i:1027;}i:29;a:7:{s:6:"header";s:28:"function getFEuserGroup () {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:116:"

Get IDs for valid fe_groups. These IDs are needed to create  dropdown selectors.
The IDs are queried from the DB.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:207:"			$importUserGroup = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'uid,title,description',
					'fe_groups',
					'deleted=0 AND hidden=0',
					'',
					'title'
				);
			return $importUserGroup;
		}

		";i:1;i:0;}s:12:"content_size";i:207;s:13:"content_lines";i:10;s:6:"atLine";i:1044;}i:31;a:7:{s:6:"header";s:33:"function getRollbackDataSets () {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:38:"

Gets all rollback datasets from DB.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"returns the session dataset as array";}}s:7:"content";a:2:{i:0;s:232:"
			global $BE_USER;

			$result = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'*',
					'tx_rsuserimp_sessions',
					'user_uid='.$BE_USER->user['uid'].' AND DELETED=0',
					'uid DESC',
					''
				);
			return $result;
		}

		";i:1;i:0;}s:12:"content_size";i:232;s:13:"content_lines";i:13;s:6:"atLine";i:1060;}i:33;a:7:{s:6:"header";s:36:"function getRollbackDataSet ($uid) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:43:"

Gets a single rollback datasets from DB.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:21:"$uid: the session UID";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"returns the session dataset as list";}}s:7:"content";a:2:{i:0;s:213:"
			global $BE_USER;

				list($result) = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'target_pid,db_table,session_data',
					'tx_rsuserimp_sessions',
					'uid='.intval($uid)
				);
			return $result;
		}

		";i:1;i:0;}s:12:"content_size";i:213;s:13:"content_lines";i:11;s:6:"atLine";i:1080;}i:35;a:7:{s:6:"header";s:28:"function fieldSelector($n) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:195:"

Creates and returns a HTML select box prefilled with allowed DB column names.
This select box is needed for the CSV to DB field mapping process. Each select box is named by the passed integer.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:23:"name for the select box";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:45:"formated HTML select box with DB column names";}}s:7:"content";a:2:{i:0;s:407:"
			$box = '<select name="fieldmap['.$n.']" '.' size="1">'."\n";
			$box .= '<option value="">Zuordnung...</option>'."\n";
			foreach ($this->columnNamesFromDB as $key => $value) {
				$box.='<option value="' . $value. '"';
				if ($this->inData['fieldmap'][$n] == $value) {
					$box .= ' SELECTED ';
				}
				$box .= '>' . $value. '</option>'."\n";
			}
			$box.='</select>'."\n";
			return $box;
		}

		";i:1;i:0;}s:12:"content_size";i:407;s:13:"content_lines";i:14;s:6:"atLine";i:1099;}i:37;a:7:{s:6:"header";s:24:"function checkUpload()	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:87:"

Checks if a file has been uploaded and returns the complete physical fileinfo if so.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:53:"the complete physical file name, including path info.";}}s:7:"content";a:2:{i:0;s:507:"
			global $FILEMOUNTS,$TYPO3_CONF_VARS,$BE_USER,$LANG;

			$file = t3lib_div::_GP('file');

			// Initializing:
			$this->fileProcessor = t3lib_div::makeInstance('t3lib_extFileFunctions');
			$this->fileProcessor->init($FILEMOUNTS, $TYPO3_CONF_VARS['BE']['fileExtensions']);
			$this->fileProcessor->init_actionPerms($BE_USER->user['fileoper_perms']);
			$this->fileProcesso
[...]
essor->start($file);
				$newfile = $this->fileProcessor->func_upload($file['upload']['1']);
			}
			return $newfile;
		}

		";i:1;i:1;}s:12:"content_size";i:1473;s:13:"content_lines";i:37;s:6:"atLine";i:1119;}i:39;a:7:{s:6:"header";s:23:"function getPresets() {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:65:"

Select valid import and mapping presets for this user from DB.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:23:"array of preset records";}}s:7:"content";a:2:{i:0;s:211:"
			$presets = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
					'*',
					'tx_rsuserimp_presets',
					'user_uid='.intval($GLOBALS['BE_USER']->user['uid']),
					'',
					'title'
				);
			return $presets;
		}

		";i:1;i:0;}s:12:"content_size";i:211;s:13:"content_lines";i:11;s:6:"atLine";i:1162;}i:41;a:7:{s:6:"header";s:35:"function processPresets(&$inData)	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:41:"

Manipulates import and mapping presets
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"&$indata: array, passed by REFERENCE!";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"$content: HTML content";}}s:7:"content";a:2:{i:0;s:507:"
			global $LANG;

			$err = FALSE;
			$file = $inData['settings']['uploadfile'];

			// Save preset
			if (isset($inData['preset']['save']))	{
				$preset = $this->getPreset($inData['preset']['select']);
				// Update existing
				if (is_array($preset))	{
					unset($inData_temp['settings']['uploadfile']);
					unset($inData_temp['settings']['OK']);
					unset($inData['fi
[...]


			// clear the savetitle after processing the preset
			unset($inData['preset']['savetitle']);
			return $content;
		}

		";i:1;i:1;}s:12:"content_size";i:3588;s:13:"content_lines";i:100;s:6:"atLine";i:1180;}i:43;a:7:{s:6:"header";s:26:"function getPreset($uid)	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:45:"

Gets single import/mapping preset from DB.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:13:"Preset record";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:39:"Preset record, if any (otherwise false)";}}s:7:"content";a:2:{i:0;s:243:"			list($preset) = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows('*','tx_rsuserimp_presets','uid='.intval($uid));
			return $preset;
		}

		/*****************************
		 *
		 * Generel Helper functions
		 *
		 *****************************/

		";i:1;i:0;}s:12:"content_size";i:243;s:13:"content_lines";i:10;s:6:"atLine";i:1287;}i:45;a:8:{s:6:"header";s:27:"function userTempFolder() {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:11:"sectionText";a:1:{i:0;s:24:"Generel Helper functions";}s:4:"cDat";a:3:{s:4:"text";s:72:"

Returns first temporary folder of the user account (from $FILEMOUNTS)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:76:"Absolute path to first "_temp_" folder of the current user, otherwise blank.";}}s:7:"content";a:2:{i:0;s:363:"		//	if ($session['dropfile'] && t3lib_div::validPathStr($session['dropfile']) && t3lib_div::isFirstPartOfStr($session['dropfile'],PATH_site.'uploads/tx_rsuserimp/') ) {
			global $FILEMOUNTS;

			foreach($FILEMOUNTS as $filePathInfo) {
				$tempFolder = $filePathInfo['path'].'_temp_/';
				if (@is_dir($tempFolder))	{
					return $tempFolder;
				}
			}
		}

		";i:1;i:0;}s:12:"content_size";i:363;s:13:"content_lines";i:11;s:6:"atLine";i:1303;}i:47;a:7:{s:6:"header";s:39:"function makeSaveForm($inData, &$row) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:33:"

Create configuration save form
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:46:"Form configuration data retrieved from GP data";}i:1;a:2:{i:0;s:5:"array";i:1;s:71:"&$row: table row accumulation variable. This is filled with table rows.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:30:"Sets content in $this->content";}}s:7:"content";a:2:{i:0;s:507:"
			global $LANG;

			// Presets:
			$row[] = '
				<tr class="tableheader bgColor5">
					<td colspan="2">'.$LANG->getLL('f1.tab2.section.presets',1).'</td>
				</tr>';

			$presets = $this->getPresets();

			$opt = array('');
			if (is_array($presets))	{
				foreach($presets as $presetCfg)	{
					$opt[$presetCfg['uid']] = $presetCfg['title'].' ['.$presetCfg['uid'].']';
	
[...]
onclick="return swapPresetSelectFields();" '.($_POST['importNow'] ? 'disabled' : '').'/></div>
					</td>
				</tr>';
		}

		";i:1;i:1;}s:12:"content_size";i:2452;s:13:"content_lines";i:46;s:6:"atLine";i:1322;}i:49;a:7:{s:6:"header";s:81:"function renderMultipleSelector($prefix,$allValues,$postData,$reverse=0,$id='')	{";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:25:"

Returns a selector-box
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:33:"$prefix: Form element name prefix";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$allValues: All possible values";}i:2;a:2:{i:0;s:5:"array";i:1;s:34:"$postData: Current values selected";}i:3;a:2:{i:0;s:6:"string";i:1;s:25:"$reverse: Alter behaviour";}i:4;a:2:{i:0;s:6:"string";i:1;s:44:"$id: An identifier for the rendered selector";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"HTML select element";}}s:7:"content";a:2:{i:0;s:507:"
			global $LANG;

			if ($reverse) {
				$optValues = array();
				if (!empty($postData)) {
					$optValues = $postData;
				}
			} else {
				//normal behaviour
				$optValues = array();
				if (!empty($postData)) {
					while(list($k,$v) = each($postData)) {
						$optValues[$v] = $v;
					}
				}
			}

			// make box:
			$opt = array();
			reset($optValues);
			while(l
[...]
tUserGroup') ) ? 'disabled' : '').' size="'.t3lib_div::intInRange(count($opt),2,6).'">'.implode('',$opt).'</select>';
		}

		";i:1;i:1;}s:12:"content_size";i:1212;s:13:"content_lines";i:38;s:6:"atLine";i:1379;}i:51;a:4:{s:6:"header";s:75:"function renderSelectBox($prefix,$value,$optValues,$id='',$JSfunction='') {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:142:"

Makes a selector-box from optValues

$this->renderSelectBox('tx_rsuserimp[pagetree][levels]',$inData['pagetree']['levels'],$id,$JSfunction)
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"Form element name";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"Current selected value";}i:2;a:2:{i:0;s:5:"array";i:1;s:36:"Options to display (key/value pairs)";}i:3;a:2:{i:0;s:6:"string";i:1;s:59:"Optional ID value (needed for various javascript functions)";}i:4;a:2:{i:0;s:6:"string";i:1;s:50:"Optional JavaScript function needed for OnChange()";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"HTML select element";}}s:6:"atLine";i:1430;}i:53;a:7:{s:6:"header";s:69:"function gc($garbageCollectionTriggerTimer,$rollbackSafetyTimespan) {";s:11:"parentClass";s:20:"tx_rsuserimp_module1";s:4:"cDat";a:3:{s:4:"text";s:94:"

Garbage collection: deactivates aged out sessions and deletes no longer needed session data
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:35:"$garbageCollectionTriggerTimer: ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:28:"$rollbackSafetyTimespan: ...";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
			global $BE_USER, $FILEMOUNTS, $TYPO3_CONF_VARS;

			$now = mktime();

			if (TYPO3_DLOG) {
				t3lib_div::devLog('Entering garbage collection routine at '.strftime("%d.%m.%Y - %H:%M:%S",$now), 'rs_userimp',-1);
			}

			if ($garbageCollectionTriggerTimer == 0) {
				t3lib_div::devLog('TriggerTimer disabled, exiting garbage collection', 'rs_userimp',1);
				t3lib_div::d
[...]
nclude files?
	foreach($SOBE->include_once as $INC_FILE)	include_once($INC_FILE);

	$SOBE->main();
	$SOBE->printContent();
?>";i:1;i:1;}s:12:"content_size";i:3489;s:13:"content_lines";i:88;s:6:"atLine";i:1454;}}s:10:"usageCount";a:27:{s:12:"H_e55f41bdfe";a:4:{s:3:"ALL";a:2:{s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:12:"makeinstance";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:232;s:15:"_functionHeader";s:49:"class tx_rsuserimp_module1 extends t3lib_SCbase {";}s:12:"H_7c6ff40199";a:5:{s:3:"ALL";a:3:{s:11:"objectUsage";i:4;s:5:"TOTAL";i:5;s:14:"nonObjectUsage";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:4:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:4;s:14:"nonObjectUsage";i:1;}s:24:"_searchtime_milliseconds";d:52;s:15:"_functionHeader";s:17:"function init()	{";}s:12:"H_759a824b85";a:4:{s:3:"ALL";a:2:{s:14:"nonObjectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:14:"nonObjectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:9;s:15:"_functionHeader";s:23:"function menuConfig()	{";}s:12:"H_a212299ace";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:32;s:15:"_functionHeader";s:17:"function main() {";}s:12:"H_0a54405331";a:2:{s:24:"_searchtime_milliseconds";d:9;s:15:"_functionHeader";s:25:"function jumpToUrl(URL)	{";}s:12:"H_bc53112603";a:2:{s:24:"_searchtime_milliseconds";d:4;s:15:"_functionHeader";s:35:"function swapPresetSelectFields() {";}s:12:"H_eff40e215c";a:2:{s:24:"_searchtime_milliseconds";d:4;s:15:"_functionHeader";s:19:"function toggle() {";}s:12:"H_c114fa4c11";a:2:{s:24:"_searchtime_milliseconds";d:4;s:15:"_functionHeader";s:32:"function toggleSelector (data) {";}s:12:"H_5cc3e91426";a:2:{s:24:"_searchtime_milliseconds";d:4;s:15:"_functionHeader";s:28:"function toggleOptions(id) {";}s:12:"H_45641bf1e0";a:2:{s:24:"_searchtime_milliseconds";d:5;s:15:"_functionHeader";s:37:"function showHideFields(id, status) {";}s:12:"H_a337945941";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:48;s:15:"_functionHeader";s:25:"function printContent()	{";}s:12:"H_2bf59c198a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:13;s:15:"_functionHeader";s:26:"function moduleContent()	{";}s:12:"H_1f48e94b0a";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:28;s:15:"_functionHeader";s:29:"function getFEuserFolder () {";}s:12:"H_64e7cd7340";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:25;s:15:"_functionHeader";s:28:"function getTTsysFolder () {";}s:12:"H_0fef751027";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:28;s:15:"_functionHeader";s:28:"function getFEuserGroup () {";}s:12:"H_02cb0b6294";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:55;s:15:"_functionHeader";s:33:"function getRollbackDataSets () {";}s:12:"H_d6e756cd2d";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:58;s:15:"_functionHeader";s:36:"function getRollbackDataSet ($uid) {";}s:12:"H_dbb0eddba1";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_cc9bedd43b";a:3:{s:8:"fileName";s:27:"mod1/class.tx_rsuserimp.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:17;s:15:"_functionHeader";s:28:"function fieldSelector($n) {";}s:12:"H_349c0e1bbd";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:14;s:15:"_functionHeader";s:24:"function checkUpload()	{";}s:12:"H_52ffd79d62";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:41;s:15:"_functionHeader";s:23:"function getPresets() {";}s:12:"H_19e5599482";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:9;s:15:"_functionHeader";s:35:"function processPresets(&$inData)	{";}s:12:"H_a077a0e631";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:3;s:5:"TOTAL";i:3;}s:24:"_searchtime_milliseconds";d:40;s:15:"_functionHeader";s:26:"function getPreset($uid)	{";}s:12:"H_1ca1ee5111";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:22;s:15:"_functionHeader";s:27:"function userTempFolder() {";}s:12:"H_142cb6c559";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:31;s:15:"_functionHeader";s:39:"function makeSaveForm($inData, &$row) {";}s:12:"H_acfa560600";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:2;s:5:"TOTAL";i:2;}s:24:"_searchtime_milliseconds";d:37;s:15:"_functionHeader";s:81:"function renderMultipleSelector($prefix,$allValues,$postData,$reverse=0,$id='')	{";}s:12:"H_5e9467d765";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:7;s:5:"TOTAL";i:7;}s:24:"_searchtime_milliseconds";d:47;s:15:"_functionHeader";s:75:"function renderSelectBox($prefix,$value,$optValues,$id='',$JSfunction='') {";}s:12:"H_f0627774ec";a:4:{s:3:"ALL";a:2:{s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:14:"MD5_19aaeae789";a:3:{s:8:"fileName";s:14:"mod1/index.php";s:11:"objectUsage";i:1;s:5:"TOTAL";i:1;}s:24:"_searchtime_milliseconds";d:12;s:15:"_functionHeader";s:69:"function gc($garbageCollectionTriggerTimer,$rollbackSafetyTimespan) {";}}}}}